* Comments
** cmp and join
Ok, so cmp and join are polymorphic ways of saying that two objects
may be joined in one and joining them (respectively). We need to have
an identity between the polymorphic join and the actual join, which we
don't. Can we make cmp and join operations of a typeclass so that the
theorems would be generic over them? Can we start over with just the T
type and put everything under it?
#+begin_src
type mismatch
  lt.ε₂ ?m.21367 ?m.21368
has type
  lt (V wf₂) (join ?m.21365 (V wf₂)) : Prop
but is expected to have type
  lt (V wf₂) (V wf₁) : Prop
#+end_src
** Dependently-typing structures
if we want to prove something like
: theorem segment_comm : Segment p1 p2 → Segment p2 p1
for Face & Volume we need to add their fields to the type (e.g.,
~Volume f₁ f₂~ instead of just ~Volume~). But then we have the
problems that we have with PolySegment-related predicates: instead of
~IsJordan_comm~ being just
#+begin_src lean4
  axiom IsJordan_comm {ps₁ : PolySegment} {ps₂ : PolySegment}
    : IsJordan ps₁ ps₂ → IsJordan ps₂ ps₁
#+end_src
it is
#+begin_src lean4
axiom IsJordan_comm
  : ∀ {p₁ q₁ p₂ q₂ p₃ q₃ p₄ q₄ : Point}
      {t : Segment p₁ q₁} {s : Segment p₂ q₂}
      {u : Segment p₃ q₃} {r : Segment p₄ q₄}
      {ps₁ : PolySegment t s} {ps₂ : PolySegment u r}
  , IsJordan ps₁ ps₂ → IsJordan ps₂ ps₁
#+end_src


* Links
** Background
https://en.wikipedia.org/wiki/Mereology
https://en.wikipedia.org/wiki/Curve#Jordan

** Lean
https://github.com/vaibhavkarve/leanteach2020/blob/master/src/euclid.lean
https://wiki.illinois.edu/wiki/display/LT2020/Euclid%27s+axioms
https://www.youtube.com/watch?v=K-kLck8BvDM
https://github.com/Ja1941/hilberts-axioms/blob/master/src/incidence/basic.lean

** Already published
https://oquenosfazpensar.fil.puc-rio.br/index.php/oqnfp/article/view/802
https://www.cambridge.org/core/journals/review-of-symbolic-logic/article/abs/de-zolts-postulate-an-abstract-approach/740479194321D18DE7FC0DE9168F8D02


* Meetings
** <2023-01-25 Wed>
- [x] descobrir como abrir o envelope do PolySegment no construtor s₂
  para pegar o outermost Segment
  - não abre, só coloca o último (ou todos) segment como parâmetro do
    tipo
- como definir um predicado opaco?
  - usar =opaque= parece funcionar…

- pra definir $\frak{T}$ a melhor opção parece ser um tipo união, ou
  então precisaremos de quebrar várias regras em 4 versões (oq não
  necessariamente é tão ruim, mas é repetitivo)
** <2023-02-15 Wed>
- na prova do teorema de Zolt, a truncagem deve ser um elemento de $v$
  (i.e., uma decomposição bem-formada), mas a nossa definição de
  truncagem não leva em conta que uma truncagem qualquer pode ter um
  resultado mal-formado. Temos de garantir então que a truncagem tenha
  um resultado bem-formado.
